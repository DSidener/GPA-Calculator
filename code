// Coder/Developer: Dalton Sidener and Robin Malestein
// Class: COP 2006-13969, Spring 2024
// Date: April 23rd, 2024
// Description: C++ Program to Calculate GPA and various other GPA related statistics
#include <iostream>
#include <iomanip>
#include <string>

void errorHandling(int& input) {
    do {
        if (std::cin.fail()) {
            std::cin.clear();
            std::cin.ignore(100, '\n');
            std::cout << "Error: Enter an integer: ";
            std::cin >> input;
        }
    }
    while(std::cin.fail());
}

void gradesNeeded(float gpa) {
    if (gpa <= 4 && gpa > 3)
        std::cout << "Aim for an A in all future courses." << std::endl;
    else if (gpa <= 3 && gpa > 2)
        std::cout << "Aim for a B in all future courses." << std::endl;
    else if (gpa <= 2 && gpa > 1)
        std::cout << "Aim for a C in all future courses." << std::endl;
    else if (gpa <= 1 && gpa > 0)
        std::cout << "Aim for a D in all future courses." << std::endl;
}

int main() {
    float cumulativeGPA = 0;
    int completedCreditHours = 0;
    float totalPointsEarned = 0;

    std::string answer1;
    std::cout << "Do you need to calculate your GPA?" << std::endl;
    std::cout << "(yes/no): ";
    std::cin >> answer1;
    if (answer1 == "yes") {
        std::cout << "\nEnter grades as shown below." << std::endl;
        std::cout << "A / A- / B+ / B / B- / C+ / C / C- / D+ / D / D- / F" << std::endl;
        int semestersCompleted = 0;
        std::cout << "\nAmount of college semesters completed: ";
        std::cin >> semestersCompleted;
        errorHandling(semestersCompleted);
        for (int semester = 1; semester <= semestersCompleted; semester++) {
            int semesterCoursesTaken = 0;
            std::cout << "\nAmount of courses taken in semester " << semester << ": ";
            std::cin >> semesterCoursesTaken;
            errorHandling(semesterCoursesTaken);
            float semesterGPA;
            float semesterPointsEarned = 0;
            int semesterCreditHours = 0;
            std::string coursenames[semesterCoursesTaken];
            for (int course = 1; course <= semesterCoursesTaken; course++) {
                std::string gradeEarned;
                int creditHours;
                std::cout << "What is the name of course "<< course << "?" << std::endl;
                std::getline(std::cin >> std::ws, coursenames[course]);
                std::cout << "What was the grade earned in " << coursenames[course] << "? " << std::endl;
                std::cin >> gradeEarned;
                std::cout << "How many credit hours is " << coursenames[course] << "? " << std::endl;
                std::cin >> creditHours;
                float pointsEarned;
                if (gradeEarned == "A")
                    pointsEarned = 4 * creditHours;
                else if (gradeEarned == "A-")
                    pointsEarned = 3.7 * creditHours;
                else if (gradeEarned == "B+")
                    pointsEarned = 3.3 * creditHours;
                else if (gradeEarned == "B")
                    pointsEarned = 3 * creditHours;
                else if (gradeEarned == "B-")
                    pointsEarned = 2.7 * creditHours;
                else if (gradeEarned == "C+")
                    pointsEarned = 2.3 * creditHours;
                else if (gradeEarned == "C")
                    pointsEarned = 2 * creditHours;
                else if (gradeEarned == "C-")
                    pointsEarned = 1.7 * creditHours;
                else if (gradeEarned == "D+")
                    pointsEarned = 1.3 * creditHours;
                else if (gradeEarned == "D")
                    pointsEarned = 1 * creditHours;
                else if (gradeEarned == "D-")
                    pointsEarned = 0.7 * creditHours;
                else
                    pointsEarned = 0;
                semesterPointsEarned += pointsEarned;
                semesterCreditHours += creditHours;
            }
            semesterGPA = semesterPointsEarned / semesterCreditHours;
            std::cout << "GPA earned in semester " << std::setprecision(4) << semester << ": " << semesterGPA << std::endl;
            totalPointsEarned += semesterPointsEarned;
            completedCreditHours += semesterCreditHours;
            cumulativeGPA = totalPointsEarned / completedCreditHours;
            std::cout << "\nYour cumulative GPA: " << std::setprecision(4) << cumulativeGPA << std::endl;
        }
    }

    else {
        std::cout << "Enter your cumulative GPA: ";
        std::cin >> cumulativeGPA;
        std::cout << "Enter amount of credit hours completed: ";
        std::cin >> completedCreditHours;
        totalPointsEarned = cumulativeGPA * completedCreditHours;
    }
    std::cout << "Completed credit hours: " << completedCreditHours << std::endl;
    int neededCreditHours = 120;
    std::cout << "\nCredit hours needed for degree (usually 120): ";
    std::cin >> neededCreditHours;
    errorHandling(neededCreditHours);
    int outsideCreditHours = 0;

    std::string answer2;
    std::cout << "Have you completed any credits that do NOT count towards your degree?" << std::endl;
    std::cout << "This may apply to students that have failed a course or switched majors." << std::endl;
    std::cout << "(yes/no): ";
    std::cin >> answer2;

    if (answer2 == "yes") {
        std::cout << "Amount of completed credits that do not count towards degree: ";
        std::cin >> outsideCreditHours;
        errorHandling(outsideCreditHours);
    }

    int remainingCreditHours;
    remainingCreditHours = neededCreditHours - completedCreditHours + outsideCreditHours;
    std::cout << "\nRemaining credit hours: " << remainingCreditHours << std::endl;

    float maximumGPA = 0;
    maximumGPA = ((remainingCreditHours * 4) + totalPointsEarned) / (neededCreditHours + outsideCreditHours);
    std::cout << "Maximum GPA possible with straight As: " << std::setprecision(4) << maximumGPA;

    float targetGPA;
    std::cout << "\n\nYour target GPA: ";
    std::cin >> targetGPA;

    float minimumGPA;
    minimumGPA = ((targetGPA * (completedCreditHours + remainingCreditHours)) - totalPointsEarned) / remainingCreditHours;
    if (minimumGPA > 4) {
        std::cout << "Target GPA is not possible (too high)." << std::endl;
    }
    else if (minimumGPA < 0) {
        std::cout << "Target GPA is not possible (too low)." << std::endl;
    }
    else {
        std::cout << "\nYou will need this GPA in the remaining credits: " << std::setprecision(4) << minimumGPA << std::endl;
        gradesNeeded(minimumGPA);
    }
    return 0;
}
